# /DataHarvester/compose/docker-compose.yml

services:
  scraper_service:
    build:
      context: ..
      dockerfile: services/scraper_service/Dockerfile.DI
    container_name: "${PROJECT_NAME}_scraper_service"
    environment:
      - MONGO_URI=mongodb://mongo_service:27017/
      - MONGO_DB=dataharvester
      - LOG_LEVEL=INFO
      - PYTHONUNBUFFERED=1
      - NLTK_DATA=/usr/local/share/nltk_data
      - SPACY_MODEL=en_core_web_sm
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ../data:/app/data
      - ../logs:/app/logs
    depends_on:
      - redis
      - task_worker
    networks:
      - backend
    healthcheck:
      test: |
        python -c "
        import nltk, spacy, pymongo;
        nltk.data.find('tokenizers/punkt');
        spacy.load('en_core_web_sm');
        pymongo.MongoClient('mongodb://mongo_service:27017/').admin.command('ping')
        "
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  mongo_service:
    build:
      context: ../services/mongo_service
      dockerfile: Dockerfile.MongoDB
    container_name: "${PROJECT_NAME}_mongo_service"
    ports:
      - "${MONGO_PORT:-27019}:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - db_network
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  task_worker:
    build:
      context: ..
      dockerfile: services/task_worker/Dockerfile.celery
    container_name: "${PROJECT_NAME}_task_worker"
    depends_on:
      - redis
      - mongo_service
    restart: unless-stopped
    networks:
      - backend
      - db_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    environment:
      - PYTHONPATH=/app
      - REDIS_URL=redis://redis:6379/0
      - MONGO_URI=mongodb://mongo_service:27017/
      - LOG_LEVEL=INFO

  redis:
    image: redis:7-alpine
    container_name: "${PROJECT_NAME}_redis"
    command: redis-server --appendonly yes
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 5
    ports:
      - "6379:6379"
    restart: unless-stopped
    volumes:
      - redis_data:/data
    networks:
      - backend
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  transformer_service:
    build:
      context: ..
      dockerfile: services/transformer_service/Dockerfile.DT
    container_name: "${PROJECT_NAME}_transformer_service"
    environment:
      - PYTHONPATH=/app
      - MONGODB_URI=mongodb://mongo_service:27017/dataharvester
      - REDIS_URL=redis://redis:6379/0
      - DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY}
    depends_on:
      - mongo_service
      - redis
      - task_worker
    networks:
      - backend
      - db_network
    healthcheck:
      test: [ "CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

networks:
  backend:
    driver: bridge
  db_network:
    internal: true

volumes:
  mongodb_data:
  redis_data:
